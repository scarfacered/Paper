From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lulu13022002 <41980282+Lulu13022002@users.noreply.github.com>
Date: Wed, 14 Feb 2024 19:33:27 +0100
Subject: [PATCH] Code generation marker stub


diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index 24daba85ce4129fb0babe67570059ca8119360c0..7aca317825492157e78ef04470914c2ec5a9d45d 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -10,6 +10,7 @@ import org.jetbrains.annotations.Nullable;
  * Represents the art on a painting
  */
 public enum Art implements Keyed {
+    // Paper start - Generated/Art
     KEBAB(0, 1, 1),
     AZTEC(1, 1, 1),
     ALBAN(2, 1, 1),
@@ -40,6 +41,7 @@ public enum Art implements Keyed {
     WIND(27, 2, 2),
     WATER(28, 2, 2),
     FIRE(29, 2, 2);
+    // Paper end - Generated/Art
 
     private final int id, width, height;
     private final NamespacedKey key;
diff --git a/src/main/java/org/bukkit/Fluid.java b/src/main/java/org/bukkit/Fluid.java
index 7202b44a65e8699cf64329e441e83d4dd1779c19..ebcef7cdbcd402010af13d9fb055b3a3f6ce665e 100644
--- a/src/main/java/org/bukkit/Fluid.java
+++ b/src/main/java/org/bukkit/Fluid.java
@@ -8,6 +8,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public enum Fluid implements Keyed {
 
+    // Paper start - Generated/Fluid
     // Paper start
     /**
      * No fluid.
@@ -30,6 +31,7 @@ public enum Fluid implements Keyed {
      * Flowing lava.
      */
     FLOWING_LAVA;
+    // Paper end - Generated/Fluid
 
     private final NamespacedKey key;
 
diff --git a/src/main/java/org/bukkit/GameEvent.java b/src/main/java/org/bukkit/GameEvent.java
index 6c9689baca1763e2ef79495d38618d587e792434..3073fe5929650076f99d2ea04ebd226534bbf93f 100644
--- a/src/main/java/org/bukkit/GameEvent.java
+++ b/src/main/java/org/bukkit/GameEvent.java
@@ -12,6 +12,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public abstract class GameEvent implements Keyed {
 
+    // Paper start - Generated/GameEvent
     public static final GameEvent BLOCK_ACTIVATE = getEvent("block_activate");
     public static final GameEvent BLOCK_ATTACH = getEvent("block_attach");
     public static final GameEvent BLOCK_CHANGE = getEvent("block_change");
@@ -21,42 +22,18 @@ public abstract class GameEvent implements Keyed {
     public static final GameEvent BLOCK_DETACH = getEvent("block_detach");
     public static final GameEvent BLOCK_OPEN = getEvent("block_open");
     public static final GameEvent BLOCK_PLACE = getEvent("block_place");
-    @Deprecated
-    public static final GameEvent BLOCK_PRESS = getEvent("block_activate");
-    @Deprecated
-    public static final GameEvent BLOCK_SWITCH = getEvent("block_activate");
-    @Deprecated
-    public static final GameEvent BLOCK_UNPRESS = getEvent("block_deactivate");
-    @Deprecated
-    public static final GameEvent BLOCK_UNSWITCH = getEvent("block_deactivate");
     public static final GameEvent CONTAINER_CLOSE = getEvent("container_close");
     public static final GameEvent CONTAINER_OPEN = getEvent("container_open");
-    @Deprecated
-    public static final GameEvent DISPENSE_FAIL = getEvent("block_activate");
     public static final GameEvent DRINK = getEvent("drink");
-    @Deprecated
-    public static final GameEvent DRINKING_FINISH = getEvent("drink");
     public static final GameEvent EAT = getEvent("eat");
-    @Deprecated
-    public static final GameEvent ELYTRA_FREE_FALL = getEvent("elytra_glide");
     public static final GameEvent ELYTRA_GLIDE = getEvent("elytra_glide");
     public static final GameEvent ENTITY_DAMAGE = getEvent("entity_damage");
-    @Deprecated
-    public static final GameEvent ENTITY_DAMAGED = getEvent("entity_damage");
     public static final GameEvent ENTITY_DIE = getEvent("entity_die");
     public static final GameEvent ENTITY_DISMOUNT = getEvent("entity_dismount");
-    @Deprecated
-    public static final GameEvent ENTITY_DYING = getEvent("entity_die");
     public static final GameEvent ENTITY_INTERACT = getEvent("entity_interact");
     public static final GameEvent ENTITY_MOUNT = getEvent("entity_mount");
-    @Deprecated
-    public static final GameEvent ENTITY_KILLED = getEvent("entity_die");
     public static final GameEvent ENTITY_PLACE = getEvent("entity_place");
     public static final GameEvent ENTITY_ACTION = getEvent("entity_action");
-    @Deprecated
-    public static final GameEvent ENTITY_ROAR = getEvent("entity_action");
-    @Deprecated
-    public static final GameEvent ENTITY_SHAKE = getEvent("entity_action");
     public static final GameEvent EQUIP = getEvent("equip");
     public static final GameEvent EXPLODE = getEvent("explode");
     public static final GameEvent FLAP = getEvent("flap");
@@ -69,34 +46,18 @@ public abstract class GameEvent implements Keyed {
     public static final GameEvent JUKEBOX_PLAY = getEvent("jukebox_play");
     public static final GameEvent JUKEBOX_STOP_PLAY = getEvent("jukebox_stop_play");
     public static final GameEvent LIGHTNING_STRIKE = getEvent("lightning_strike");
-    @Deprecated
-    public static final GameEvent MOB_INTERACT = getEvent("entity_interact");
     public static final GameEvent NOTE_BLOCK_PLAY = getEvent("note_block_play");
-    @Deprecated
-    public static final GameEvent PISTON_CONTRACT = getEvent("block_deactivate");
-    @Deprecated
-    public static final GameEvent PISTON_EXTEND = getEvent("block_activate");
     public static final GameEvent PRIME_FUSE = getEvent("prime_fuse");
     public static final GameEvent PROJECTILE_LAND = getEvent("projectile_land");
     public static final GameEvent PROJECTILE_SHOOT = getEvent("projectile_shoot");
-    @Deprecated
-    public static final GameEvent RAVAGER_ROAR = getEvent("entity_action");
-    @Deprecated
-    public static final GameEvent RING_BELL = getEvent("block_change");
     public static final GameEvent SCULK_SENSOR_TENDRILS_CLICKING = getEvent("sculk_sensor_tendrils_clicking");
     public static final GameEvent SHEAR = getEvent("shear");
     public static final GameEvent SHRIEK = getEvent("shriek");
-    @Deprecated
-    public static final GameEvent SHULKER_CLOSE = getEvent("container_close");
-    @Deprecated
-    public static final GameEvent SHULKER_OPEN = getEvent("container_open");
     public static final GameEvent SPLASH = getEvent("splash");
     public static final GameEvent STEP = getEvent("step");
     public static final GameEvent SWIM = getEvent("swim");
     public static final GameEvent TELEPORT = getEvent("teleport");
     public static final GameEvent UNEQUIP = getEvent("unequip");
-    @Deprecated
-    public static final GameEvent WOLF_SHAKING = getEvent("entity_action");
     public static final GameEvent RESONATE_1 = getEvent("resonate_1");
     public static final GameEvent RESONATE_2 = getEvent("resonate_2");
     public static final GameEvent RESONATE_3 = getEvent("resonate_3");
@@ -112,6 +73,47 @@ public abstract class GameEvent implements Keyed {
     public static final GameEvent RESONATE_13 = getEvent("resonate_13");
     public static final GameEvent RESONATE_14 = getEvent("resonate_14");
     public static final GameEvent RESONATE_15 = getEvent("resonate_15");
+    // Paper end - Generated/GameEvent
+    @Deprecated
+    public static final GameEvent BLOCK_PRESS = getEvent("block_activate");
+    @Deprecated
+    public static final GameEvent BLOCK_SWITCH = getEvent("block_activate");
+    @Deprecated
+    public static final GameEvent BLOCK_UNPRESS = getEvent("block_deactivate");
+    @Deprecated
+    public static final GameEvent BLOCK_UNSWITCH = getEvent("block_deactivate");
+    @Deprecated
+    public static final GameEvent DISPENSE_FAIL = getEvent("block_activate");
+    @Deprecated
+    public static final GameEvent DRINKING_FINISH = getEvent("drink");
+    @Deprecated
+    public static final GameEvent ELYTRA_FREE_FALL = getEvent("elytra_glide");
+    @Deprecated
+    public static final GameEvent ENTITY_DAMAGED = getEvent("entity_damage");
+    @Deprecated
+    public static final GameEvent ENTITY_DYING = getEvent("entity_die");
+    @Deprecated
+    public static final GameEvent ENTITY_KILLED = getEvent("entity_die");
+    @Deprecated
+    public static final GameEvent ENTITY_ROAR = getEvent("entity_action");
+    @Deprecated
+    public static final GameEvent ENTITY_SHAKE = getEvent("entity_action");
+    @Deprecated
+    public static final GameEvent MOB_INTERACT = getEvent("entity_interact");
+    @Deprecated
+    public static final GameEvent PISTON_CONTRACT = getEvent("block_deactivate");
+    @Deprecated
+    public static final GameEvent PISTON_EXTEND = getEvent("block_activate");
+    @Deprecated
+    public static final GameEvent RAVAGER_ROAR = getEvent("entity_action");
+    @Deprecated
+    public static final GameEvent RING_BELL = getEvent("block_change");
+    @Deprecated
+    public static final GameEvent SHULKER_CLOSE = getEvent("container_close");
+    @Deprecated
+    public static final GameEvent SHULKER_OPEN = getEvent("container_open");
+    @Deprecated
+    public static final GameEvent WOLF_SHAKING = getEvent("entity_action");
 
     /**
      * Returns a {@link GameEvent} by a {@link NamespacedKey}.
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 82d009c0bbe4b3026a535e02d6e0ed20c7bd525d..489f1bf244d040a8b599e03351665472b3ae5a12 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -128,6 +128,7 @@ import org.jetbrains.annotations.Nullable;
 @SuppressWarnings({"DeprecatedIsStillUsed", "deprecation"}) // Paper
 public enum Material implements Keyed, Translatable, net.kyori.adventure.translation.Translatable { // Paper
     //<editor-fold desc="Materials" defaultstate="collapsed">
+    // Paper start - Generated/Items
     AIR(9648, 0),
     STONE(22948),
     GRANITE(21091),
@@ -3811,6 +3812,9 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     BIG_DRIPLEAF_STEM(13167, Dripleaf.class),
     POTTED_AZALEA_BUSH(20430),
     POTTED_FLOWERING_AZALEA_BUSH(10609),
+    // Paper end - Generated/Items
+    // Paper start - Generated/Blocks
+    // Paper end - Generated/Blocks
     // ----- Legacy Separator -----
     @Deprecated
     LEGACY_AIR(0, 0),
@@ -5005,6 +5009,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     // Paper end
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isBlock">
+            // Paper start - Generated/Material#isBlock
             case ACACIA_BUTTON:
             case ACACIA_DOOR:
             case ACACIA_FENCE:
@@ -6065,6 +6070,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_WOOL:
             case ZOMBIE_HEAD:
             case ZOMBIE_WALL_HEAD:
+            // Paper end - Generated/Material#isBlock
             //</editor-fold>
                 return true;
             default:
@@ -6080,6 +6086,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     public boolean isEdible() {
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isEdible">
+            // Paper start - Generated/Material#isEdible
             case APPLE:
             case BAKED_POTATO:
             case BEEF:
@@ -6121,6 +6128,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case SUSPICIOUS_STEW:
             case SWEET_BERRIES:
             case TROPICAL_FISH:
+            // Paper end - Generated/Material#isEdible
             // ----- Legacy Separator -----
             case LEGACY_BREAD:
             case LEGACY_CARROT_ITEM:
@@ -6257,6 +6265,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     public boolean isRecord() {
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isRecord">
+            // Paper start - Generated/Material#isRecord
             case MUSIC_DISC_5:
             case MUSIC_DISC_11:
             case MUSIC_DISC_13:
@@ -6273,6 +6282,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case MUSIC_DISC_STRAD:
             case MUSIC_DISC_WAIT:
             case MUSIC_DISC_WARD:
+            // Paper end - Generated/Material#isRecord
             //</editor-fold>
                 return true;
             default:
@@ -6291,6 +6301,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         }
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isSolid">
+            // Paper start - Generated/Material#isSolid
             case ACACIA_DOOR:
             case ACACIA_FENCE:
             case ACACIA_FENCE_GATE:
@@ -7125,6 +7136,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_TERRACOTTA:
             case YELLOW_WALL_BANNER:
             case YELLOW_WOOL:
+            // Paper end - Generated/Material#isSolid
             // ----- Legacy Separator -----
             case LEGACY_STONE:
             case LEGACY_GRASS:
@@ -7340,9 +7352,11 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     public boolean isAir() {
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isAir">
+            // Paper start - Generated/Material#isAir
             case AIR:
             case CAVE_AIR:
             case VOID_AIR:
+            // Paper end - Generated/Material#isAir
             // ----- Legacy Separator -----
             case LEGACY_AIR:
                 //</editor-fold>
@@ -7366,6 +7380,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         }
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isTransparent">
+            // Paper start - Generated/Material#isTransparent
             case ACACIA_BUTTON:
             case ACACIA_SAPLING:
             case ACTIVATOR_RAIL:
@@ -7493,6 +7508,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_CARPET:
             case ZOMBIE_HEAD:
             case ZOMBIE_WALL_HEAD:
+            // Paper end - Generated/Material#isTransparent
             // ----- Legacy Separator -----
             case LEGACY_AIR:
             case LEGACY_SAPLING:
@@ -7562,6 +7578,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         }
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isFlammable">
+            // Paper start - Generated/Material#isFlammable
             case ACACIA_DOOR:
             case ACACIA_FENCE:
             case ACACIA_FENCE_GATE:
@@ -7836,6 +7853,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_CARPET:
             case YELLOW_WALL_BANNER:
             case YELLOW_WOOL:
+            // Paper end - Generated/Material#isFlammable
             // ----- Legacy Separator -----
             case LEGACY_WOOD:
             case LEGACY_LOG:
@@ -7910,6 +7928,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         }
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isBurnable">
+            // Paper start - Generated/Material#isBurnable
             case ACACIA_FENCE:
             case ACACIA_FENCE_GATE:
             case ACACIA_LEAVES:
@@ -8084,6 +8103,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case WITHER_ROSE:
             case YELLOW_CARPET:
             case YELLOW_WOOL:
+            // Paper end - Generated/Material#isBurnable
             // ----- Legacy Separator -----
             case LEGACY_WOOD:
             case LEGACY_LOG:
@@ -8137,6 +8157,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     public boolean isFuel() {
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isFuel">
+            // Paper start - Generated/Material#isFuel
             case ACACIA_BOAT:
             case ACACIA_BUTTON:
             case ACACIA_CHEST_BOAT:
@@ -8385,6 +8406,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_BANNER:
             case YELLOW_CARPET:
             case YELLOW_WOOL:
+            // Paper end - Generated/Material#isFuel
             // ----- Legacy Separator -----
             case LEGACY_LAVA_BUCKET:
             case LEGACY_COAL_BLOCK:
@@ -8480,6 +8502,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         }
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isOccluding">
+            // Paper start - Generated/Material#isOccluding
             case ACACIA_LOG:
             case ACACIA_PLANKS:
             case ACACIA_WOOD:
@@ -8851,6 +8874,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_SHULKER_BOX:
             case YELLOW_TERRACOTTA:
             case YELLOW_WOOL:
+            // Paper end - Generated/Material#isOccluding
             // ----- Legacy Separator -----
             case LEGACY_STONE:
             case LEGACY_GRASS:
@@ -8966,6 +8990,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         }
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="hasGravity">
+            // Paper start - Generated/Material#hasGravity
             case ANVIL:
             case BLACK_CONCRETE_POWDER:
             case BLUE_CONCRETE_POWDER:
@@ -8989,6 +9014,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case SAND:
             case WHITE_CONCRETE_POWDER:
             case YELLOW_CONCRETE_POWDER:
+            // Paper end - Generated/Material#hasGravity
             // ----- Legacy Separator -----
             case LEGACY_SAND:
             case LEGACY_GRAVEL:
@@ -9009,6 +9035,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     public boolean isItem() {
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isItem">
+            // Paper start - Generated/Material#isItem
             case ACACIA_WALL_HANGING_SIGN:
             case ACACIA_WALL_SIGN:
             case ATTACHED_MELON_STEM:
@@ -9156,6 +9183,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_CANDLE_CAKE:
             case YELLOW_WALL_BANNER:
             case ZOMBIE_WALL_HEAD:
+            // Paper end - Generated/Material#isItem
             // ----- Legacy Separator -----
             case LEGACY_ACACIA_DOOR:
             case LEGACY_BED_BLOCK:
@@ -9239,6 +9267,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     public boolean isInteractable() {
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="isInteractable">
+            // Paper start - Generated/Material#isInteractable
             case ACACIA_BUTTON:
             case ACACIA_DOOR:
             case ACACIA_FENCE:
@@ -9523,6 +9552,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
             case YELLOW_CANDLE:
             case YELLOW_CANDLE_CAKE:
             case YELLOW_SHULKER_BOX:
+            // Paper end - Generated/Material#isInteractable
                 // </editor-fold>
                 return true;
             default:
@@ -9543,6 +9573,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         Preconditions.checkArgument(isBlock(), "The Material is not a block!");
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getBlockHardness">
+            // Paper start - Generated/Material#getHardness
             case BARRIER:
             case BEDROCK:
             case CHAIN_COMMAND_BLOCK:
@@ -10476,6 +10507,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
                 return 100.0F;
             default:
                 return 0F;
+            // Paper end - Generated/Material#getHardness
             // </editor-fold>
         }
     }
@@ -10494,6 +10526,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         Preconditions.checkArgument(isBlock(), "The Material is not a block!");
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getBlastResistance">
+            // Paper start - Generated/Material#getBlastResistance
             case BIG_DRIPLEAF:
             case BIG_DRIPLEAF_STEM:
             case BLACK_CANDLE:
@@ -11426,6 +11459,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
                 return 3600000.8F;
             default:
                 return 0;
+            // Paper end - Generated/Material#getBlastResistance
             // </editor-fold>
         }
     }
@@ -11446,6 +11480,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         Preconditions.checkArgument(isBlock(), "The Material is not a block!");
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getSlipperiness">
+            // Paper start - Generated/Material#getSlipperiness
             default:
                 return 0.6F;
             case SLIME_BLOCK:
@@ -11456,6 +11491,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
                 return 0.98F;
             case BLUE_ICE:
                 return 0.989F;
+            // Paper end - Generated/Material#getSlipperiness
             // </editor-fold>
         }
     }
@@ -11473,6 +11509,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         Preconditions.checkArgument(isItem(), "The Material is not an item!");
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getCraftingRemainingItem">
+            // Paper start - Generated/Material#getCraftingRemainingItem
             case WATER_BUCKET:
             case LAVA_BUCKET:
             case MILK_BUCKET:
@@ -11482,6 +11519,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
                 return GLASS_BOTTLE;
             default:
                 return null;
+            // Paper end - Generated/Material#getCraftingRemainingItem
             // </editor-fold>
         }
     }
@@ -11498,6 +11536,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
         Preconditions.checkArgument(isItem(), "The Material is not an item!");
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getEquipmentSlot">
+            // Paper start - Generated/Material#getEquipmentSlot
             case CARVED_PUMPKIN:
             case CHAINMAIL_HELMET:
             case CREEPER_HEAD:
@@ -11562,6 +11601,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
                 return EquipmentSlot.BODY;
             default:
                 return EquipmentSlot.HAND;
+            // Paper end - Generated/Material#getEquipmentSlot
             // </editor-fold>
         }
     }
diff --git a/src/main/java/org/bukkit/MusicInstrument.java b/src/main/java/org/bukkit/MusicInstrument.java
index 704dba92f9246ef398ed8d162ebee3cf305960e1..da5f0b9f6b1f065999c60144a6aca75d4762e75a 100644
--- a/src/main/java/org/bukkit/MusicInstrument.java
+++ b/src/main/java/org/bukkit/MusicInstrument.java
@@ -9,6 +9,7 @@ import org.jetbrains.annotations.Nullable;
 
 public abstract class MusicInstrument implements Keyed, net.kyori.adventure.translation.Translatable { // Paper - translation keys
 
+    // Paper start - Generated/MusicInstrument
     public static final MusicInstrument PONDER_GOAT_HORN = getInstrument("ponder_goat_horn");
     public static final MusicInstrument SING_GOAT_HORN = getInstrument("sing_goat_horn");
     public static final MusicInstrument SEEK_GOAT_HORN = getInstrument("seek_goat_horn");
@@ -17,6 +18,7 @@ public abstract class MusicInstrument implements Keyed, net.kyori.adventure.tran
     public static final MusicInstrument CALL_GOAT_HORN = getInstrument("call_goat_horn");
     public static final MusicInstrument YEARN_GOAT_HORN = getInstrument("yearn_goat_horn");
     public static final MusicInstrument DREAM_GOAT_HORN = getInstrument("dream_goat_horn");
+    // Paper end - Generated/MusicInstrument
 
     /**
      * Returns a {@link MusicInstrument} by a {@link NamespacedKey}.
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index 7c39a281a38b412a989dbdf3d12e826ee6eda714..100e19006c268d222b2b7d50b2f8779620b4bf44 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -13,6 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public enum Sound implements Keyed, net.kyori.adventure.sound.Sound.Type { // Paper - implement Sound.Type
 
+    // Paper start - Generated/Sound
     AMBIENT_BASALT_DELTAS_ADDITIONS("ambient.basalt_deltas.additions"),
     AMBIENT_BASALT_DELTAS_LOOP("ambient.basalt_deltas.loop"),
     AMBIENT_BASALT_DELTAS_MOOD("ambient.basalt_deltas.mood"),
@@ -1812,6 +1813,7 @@ public enum Sound implements Keyed, net.kyori.adventure.sound.Sound.Type { // Pa
     UI_TOAST_OUT("ui.toast.out"),
     WEATHER_RAIN("weather.rain"),
     WEATHER_RAIN_ABOVE("weather.rain.above");
+    // Paper end - Generated/Sound
 
     private final NamespacedKey key;
 
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 4ce888688d04eb0c4b2261a6474df870e7d2bb00..9e6d231b783fcb54c63cb80f12b598e6b5615f08 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -7,6 +7,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents a countable statistic, which is tracked by the server.
  */
 public enum Statistic implements Keyed {
+    // Paper start - Generated/StatisticCustom
     DAMAGE_DEALT,
     DAMAGE_TAKEN,
     DEATHS,
@@ -92,7 +93,10 @@ public enum Statistic implements Keyed {
     INTERACT_WITH_GRINDSTONE,
     TARGET_HIT,
     INTERACT_WITH_SMITHING_TABLE,
+    // Paper end - Generated/StatisticCustom
+    // Paper start - Generated/StatisticType
     STRIDER_ONE_CM;
+    // Paper end - Generated/StatisticType
 
     private final Type type;
     private final NamespacedKey key;
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
index 511980c6d190fb80e23d0015dee5ee170bb673ac..7a70d92cfec6ef9d7fdd516a3c7d8c096cce0582 100644
--- a/src/main/java/org/bukkit/Tag.java
+++ b/src/main/java/org/bukkit/Tag.java
@@ -19,6 +19,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public interface Tag<T extends Keyed> extends Keyed {
 
+    // Paper start - Generated/Tag
     /**
      * Key for the built in block registry.
      */
@@ -53,11 +54,6 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all colors of carpet.
      */
     Tag<Material> WOOL_CARPETS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wool_carpets"), Material.class);
-    /**
-     * @deprecated {@link #WOOL_CARPETS}.
-     */
-    @Deprecated
-    Tag<Material> CARPETS = WOOL_CARPETS;
     /**
      * Vanilla block tag representing all wooden doors.
      */
@@ -799,24 +795,10 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla item tag representing all piglin food.
      */
     Tag<Material> ITEMS_PIGLIN_FOOD = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("piglin_food"), Material.class);
-    /**
-     * Vanilla item tag representing all piglin food.
-     *
-     * @deprecated use {@link #ITEMS_PIGLIN_FOOD}
-     */
-    @Deprecated
-    Tag<Material> PIGLIN_FOOD = ITEMS_PIGLIN_FOOD;
     /**
      * Vanilla item tag representing all fox food.
      */
     Tag<Material> ITEMS_FOX_FOOD = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("fox_food"), Material.class);
-    /**
-     * Vanilla item tag representing all fox food.
-     *
-     * @deprecated use {@link #ITEMS_FOX_FOOD}
-     */
-    @Deprecated
-    Tag<Material> FOX_FOOD = ITEMS_FOX_FOOD;
     /**
      * Vanilla item tag representing all cow food.
      */
@@ -1050,10 +1032,6 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla item tag representing all shovels.
      */
     Tag<Material> ITEMS_SHOVELS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("shovels"), Material.class);
-    /**
-     * Vanilla item tag representing all tools.
-     */
-    Tag<Material> ITEMS_TOOLS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("tools"), Material.class);
     /**
      * Vanilla item tag representing all items which break decorated pots.
      */
@@ -1147,13 +1125,6 @@ public interface Tag<T extends Keyed> extends Keyed {
      * the wearer.
      */
     Tag<Material> FREEZE_IMMUNE_WEARABLES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("freeze_immune_wearables"), Material.class);
-    /**
-     * Vanilla item tag representing all items which tempt axolotls.
-     *
-     * @deprecated use {@link #ITEMS_AXOLOTL_FOOD}
-     */
-    @Deprecated
-    Tag<Material> AXOLOTL_TEMPT_ITEMS = ITEMS_AXOLOTL_FOOD;
     /**
      * Vanilla item tag representing all items which are preferred for
      * harvesting clusters (unused).
@@ -1236,12 +1207,6 @@ public interface Tag<T extends Keyed> extends Keyed {
      */
     @org.jetbrains.annotations.ApiStatus.Experimental @MinecraftExperimental(value = MinecraftExperimental.Requires.UPDATE_1_21) // Paper - add missing annotation
     Tag<EntityType> ENTITY_TYPES_DEFLECTS_PROJECTILES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("deflects_projectiles"), EntityType.class);
-    /**
-     * Vanilla tag representing entities which deflect arrows.
-     * @deprecated use {@link #ENTITY_TYPES_DEFLECTS_PROJECTILES}
-     */
-    @Deprecated
-    Tag<EntityType> ENTITY_TYPES_DEFLECTS_ARROWS = ENTITY_TYPES_DEFLECTS_PROJECTILES;
     /**
      * Vanilla tag representing entities which can turn in boats.
      */
@@ -1326,6 +1291,48 @@ public interface Tag<T extends Keyed> extends Keyed {
      */
     Tag<GameEvent> GAME_EVENT_ALLAY_CAN_LISTEN = Bukkit.getTag(REGISTRY_GAME_EVENTS, NamespacedKey.minecraft("allay_can_listen"), GameEvent.class);
     // Paper end
+    // Paper end - Generated/Tag
+    /**
+     * @deprecated {@link #WOOL_CARPETS}.
+     */
+    @Deprecated
+    Tag<Material> CARPETS = WOOL_CARPETS;
+    /**
+     * Vanilla item tag representing all piglin food.
+     *
+     * @deprecated use {@link #ITEMS_PIGLIN_FOOD}
+     */
+    @Deprecated
+    Tag<Material> PIGLIN_FOOD = ITEMS_PIGLIN_FOOD;
+    /**
+     * Vanilla item tag representing all fox food.
+     *
+     * @deprecated use {@link #ITEMS_FOX_FOOD}
+     */
+    @Deprecated
+    Tag<Material> FOX_FOOD = ITEMS_FOX_FOOD;
+    /**
+     * Vanilla item tag representing all tools.
+     *
+     * @deprecated removed in Minecraft 1.20.5. Do not use. Will be removed at a later date. Until then,
+     * this constant now acts as a reference to {@link #ITEMS_BREAKS_DECORATED_POTS} which largely shares
+     * the same contents of the old "minecraft:tools" tag.
+     */
+    @Deprecated(forRemoval = true)
+    Tag<Material> ITEMS_TOOLS = ITEMS_BREAKS_DECORATED_POTS;
+    /**
+     * Vanilla item tag representing all items which tempt axolotls.
+     *
+     * @deprecated use {@link #ITEMS_AXOLOTL_FOOD}
+     */
+    @Deprecated
+    Tag<Material> AXOLOTL_TEMPT_ITEMS = ITEMS_AXOLOTL_FOOD;
+    /**
+     * Vanilla tag representing entities which deflect arrows.
+     * @deprecated use {@link #ENTITY_TYPES_DEFLECTS_PROJECTILES}
+     */
+    @Deprecated
+    Tag<EntityType> ENTITY_TYPES_DEFLECTS_ARROWS = ENTITY_TYPES_DEFLECTS_PROJECTILES;
 
     /**
      * Returns whether or not this tag has an entry for the specified item.
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index 063cb21e33d039933e9ef295564db595cfd9f8c9..8f6a65277c497bca526f225e9f8edae491246697 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -11,6 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public enum Attribute implements Keyed, Translatable, net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
 
+    // Paper start - Generated/Attribute
     /**
      * Maximum health of an Entity.
      */
@@ -99,6 +100,7 @@ public enum Attribute implements Keyed, Translatable, net.kyori.adventure.transl
      * Chance of a zombie to spawn reinforcements.
      */
     ZOMBIE_SPAWN_REINFORCEMENTS("zombie.spawn_reinforcements");
+    // Paper end - Generated/Attribute
 
     private final NamespacedKey key;
 
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index 5d8fa5b39a5d50cca48ba63af3a84b80f279b649..c6ea69c0d05aef5a29b758dbd3ea4c84a7587f6b 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -9,6 +9,7 @@ import org.jetbrains.annotations.NotNull;
  * Holds all accepted Biomes in the default server
  */
 public enum Biome implements Keyed, net.kyori.adventure.translation.Translatable { // Paper
+    // Paper start - Generated/Biome
     OCEAN,
     PLAINS,
     DESERT,
@@ -73,6 +74,7 @@ public enum Biome implements Keyed, net.kyori.adventure.translation.Translatable
     JAGGED_PEAKS,
     STONY_PEAKS,
     CHERRY_GROVE,
+    // Paper end - Generated/Biome
     /**
      * Represents a custom Biome
      */
diff --git a/src/main/java/org/bukkit/block/banner/PatternType.java b/src/main/java/org/bukkit/block/banner/PatternType.java
index 1b958b2024ec3f7729605fce70074c5c0208b6cc..13de6f36cfe035e496509ff4e3ced9f78039ac36 100644
--- a/src/main/java/org/bukkit/block/banner/PatternType.java
+++ b/src/main/java/org/bukkit/block/banner/PatternType.java
@@ -12,6 +12,7 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public enum PatternType implements Keyed {
+    // Paper start - Generated/PatternType
     BASE("b", "base"),
     SQUARE_BOTTOM_LEFT("bl", "square_bottom_left"),
     SQUARE_BOTTOM_RIGHT("br", "square_bottom_right"),
@@ -57,6 +58,7 @@ public enum PatternType implements Keyed {
     FLOW("flw", "flow"),
     @MinecraftExperimental(Requires.UPDATE_1_21)
     GUSTER("gus", "guster");
+    // Paper end - Generated/PatternType
 
     private final String identifier;
     private final NamespacedKey key;
diff --git a/src/main/java/org/bukkit/damage/DamageType.java b/src/main/java/org/bukkit/damage/DamageType.java
index 9f2d80a91e12f09407d737668f4178e81811fe14..d25c128789ea49dd63428624956bdc93451f8c74 100644
--- a/src/main/java/org/bukkit/damage/DamageType.java
+++ b/src/main/java/org/bukkit/damage/DamageType.java
@@ -20,6 +20,7 @@ import org.jetbrains.annotations.NotNull;
 @ApiStatus.Experimental
 public interface DamageType extends Keyed, Translatable {
 
+    // Paper start - Generated/DamageType
     public static final DamageType IN_FIRE = getDamageType("in_fire");
     public static final DamageType LIGHTNING_BOLT = getDamageType("lightning_bolt");
     public static final DamageType ON_FIRE = getDamageType("on_fire");
@@ -65,6 +66,7 @@ public interface DamageType extends Keyed, Translatable {
     public static final DamageType BAD_RESPAWN_POINT = getDamageType("bad_respawn_point");
     public static final DamageType OUTSIDE_BORDER = getDamageType("outside_border");
     public static final DamageType GENERIC_KILL = getDamageType("generic_kill");
+    // Paper end - Generated/DamageType
 
     @NotNull
     private static DamageType getDamageType(@NotNull String key) {
diff --git a/src/main/java/org/bukkit/entity/Boat.java b/src/main/java/org/bukkit/entity/Boat.java
index 2ac685fb1817f3ce06ebe6391cc863712d68367c..056d44476b2118b124ad2f7262aee8631d1fc0aa 100644
--- a/src/main/java/org/bukkit/entity/Boat.java
+++ b/src/main/java/org/bukkit/entity/Boat.java
@@ -136,6 +136,7 @@ public interface Boat extends Vehicle {
      * Represents the type of boats.
      */
     public enum Type {
+        // Paper start - Generated/BoatType
         OAK(Material.OAK_PLANKS),
         SPRUCE(Material.SPRUCE_PLANKS),
         BIRCH(Material.BIRCH_PLANKS),
@@ -146,6 +147,7 @@ public interface Boat extends Vehicle {
         MANGROVE(Material.MANGROVE_PLANKS),
         BAMBOO(Material.BAMBOO_PLANKS),
         ;
+        // Paper end - Generated/BoatType
 
         private final Material materialBlock;
 
@@ -170,11 +172,13 @@ public interface Boat extends Vehicle {
     public enum Status {
 
         NOT_IN_WORLD, // Paper
+        // Paper start - Generated/BoatStatus
         IN_WATER,
         UNDER_WATER,
         UNDER_FLOWING_WATER,
         ON_LAND,
         IN_AIR;
+        // Paper end - Generated/BoatStatus
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/entity/Cat.java b/src/main/java/org/bukkit/entity/Cat.java
index d03adfaa4176617ef2ace2754fe02b63860e3aee..fceb2f0a452a1ce72988bbd1ecca599cfb6af6d9 100644
--- a/src/main/java/org/bukkit/entity/Cat.java
+++ b/src/main/java/org/bukkit/entity/Cat.java
@@ -46,6 +46,7 @@ public interface Cat extends Tameable, Sittable, io.papermc.paper.entity.CollarC
      * Represents the various different cat types there are.
      */
     public enum Type implements Keyed {
+        // Paper start - Generated/CatType
         TABBY("tabby"),
         BLACK("black"),
         RED("red"),
@@ -57,6 +58,7 @@ public interface Cat extends Tameable, Sittable, io.papermc.paper.entity.CollarC
         WHITE("white"),
         JELLIE("jellie"),
         ALL_BLACK("all_black");
+        // Paper end - Generated/CatType
 
         private final NamespacedKey key;
 
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 1d1315262737d99bf9f5aabc0ae66eee4645cc65..65fdf77ca89eadae84bf1025215ebd3338a5acf5 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -28,6 +28,7 @@ import org.jetbrains.annotations.Nullable;
 public enum EntityType implements Keyed, Translatable, net.kyori.adventure.translation.Translatable { // Paper - translatable
 
     // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
+    // Paper start - Generated/EntityType
     /**
      * An item resting on the ground.
      * <p>
@@ -314,6 +315,7 @@ public enum EntityType implements Keyed, Translatable, net.kyori.adventure.trans
      */
     LIGHTNING_BOLT("lightning_bolt", LightningStrike.class, -1, false),
     PLAYER("player", Player.class, -1, false),
+    // Paper end - Generated/EntityType
     /**
      * An unknown entity without an Entity Class
      */
diff --git a/src/main/java/org/bukkit/entity/Fox.java b/src/main/java/org/bukkit/entity/Fox.java
index 473a7e36ad64f866d1d2e09e2ecb2e9881668faf..1fb12e0bc77247e9f6562bb7a8d0ff35eecb54a9 100644
--- a/src/main/java/org/bukkit/entity/Fox.java
+++ b/src/main/java/org/bukkit/entity/Fox.java
@@ -89,8 +89,10 @@ public interface Fox extends Animals, Sittable {
      * Represents the various different fox types there are.
      */
     public enum Type {
+        // Paper start - Generated/FoxType
         RED,
         SNOW;
+        // Paper end - Generated/FoxType
     }
 
     // Paper start - Add more fox behavior API
diff --git a/src/main/java/org/bukkit/entity/Frog.java b/src/main/java/org/bukkit/entity/Frog.java
index 0960bdbb3253bfe109dc6283244b8c9d95a850f7..d11cfd431cee09886ecd9d9416de85f56ac90462 100644
--- a/src/main/java/org/bukkit/entity/Frog.java
+++ b/src/main/java/org/bukkit/entity/Frog.java
@@ -46,6 +46,7 @@ public interface Frog extends Animals {
      */
     public enum Variant implements Keyed {
 
+        // Paper start - Generated/FrogVariant
         /**
          * Temperate (brown-orange) frog.
          */
@@ -58,6 +59,7 @@ public interface Frog extends Animals {
          * Cold (green) frog.
          */
         COLD;
+        // Paper end - Generated/FrogVariant
         private final NamespacedKey key;
 
         private Variant() {
diff --git a/src/main/java/org/bukkit/entity/Panda.java b/src/main/java/org/bukkit/entity/Panda.java
index aa5686df134185334a74429576ff0709a604dbfd..94ce1e46ef2fe4a8aa5ba79e1c941119b744a572 100644
--- a/src/main/java/org/bukkit/entity/Panda.java
+++ b/src/main/java/org/bukkit/entity/Panda.java
@@ -201,6 +201,7 @@ public interface Panda extends Animals, Sittable {
 
     public enum Gene {
 
+        // Paper start - Generated/PandaGene
         NORMAL(false),
         LAZY(false),
         WORRIED(false),
@@ -208,6 +209,7 @@ public interface Panda extends Animals, Sittable {
         BROWN(true),
         WEAK(true),
         AGGRESSIVE(false);
+        // Paper end - Generated/PandaGene
 
         private final boolean recessive;
 
diff --git a/src/main/java/org/bukkit/entity/Sniffer.java b/src/main/java/org/bukkit/entity/Sniffer.java
index 15a0a733b0e5804655b5957cbf20831290d52a08..53228454d68eb57f6f0e70760ac02fd7998312f8 100644
--- a/src/main/java/org/bukkit/entity/Sniffer.java
+++ b/src/main/java/org/bukkit/entity/Sniffer.java
@@ -74,6 +74,7 @@ public interface Sniffer extends Animals {
      * Represents the current state of the Sniffer.
      */
     public enum State {
+        // Paper start - Generated/SnifferState
         IDLING,
         FEELING_HAPPY,
         SCENTING,
@@ -81,5 +82,6 @@ public interface Sniffer extends Animals {
         SEARCHING,
         DIGGING,
         RISING;
+        // Paper end - Generated/SnifferState
     }
 }
diff --git a/src/main/java/org/bukkit/entity/TropicalFish.java b/src/main/java/org/bukkit/entity/TropicalFish.java
index 84bba32e80d755f094975b667f1bf2a132087f4f..4fec7b3bbeae7ab0538f3de6e83faa9c5aa0b8ad 100644
--- a/src/main/java/org/bukkit/entity/TropicalFish.java
+++ b/src/main/java/org/bukkit/entity/TropicalFish.java
@@ -60,6 +60,7 @@ public interface TropicalFish extends io.papermc.paper.entity.SchoolableFish { /
      */
     public static enum Pattern {
 
+        // Paper start - Generated/TropicalFishPattern
         KOB,
         SUNSTREAK,
         SNOOPER,
@@ -72,5 +73,6 @@ public interface TropicalFish extends io.papermc.paper.entity.SchoolableFish { /
         BLOCKFISH,
         BETTY,
         CLAYFISH;
+        // Paper end - Generated/TropicalFishPattern
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index 3bc24457d143449e6a338d79becf7c39b9f81054..b6f07418ab7267cc43d1174fc023930e04eba360 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -167,6 +167,7 @@ public interface Villager extends AbstractVillager {
      */
     public enum Type implements Keyed {
 
+        // Paper start - Generated/VillagerType
         DESERT,
         JUNGLE,
         PLAINS,
@@ -174,6 +175,7 @@ public interface Villager extends AbstractVillager {
         SNOW,
         SWAMP,
         TAIGA;
+        // Paper end - Generated/VillagerType
         private final NamespacedKey key;
 
         private Type() {
diff --git a/src/main/java/org/bukkit/entity/Wolf.java b/src/main/java/org/bukkit/entity/Wolf.java
index 4b84c04675775e2a606630b00de8afe51665cebc..263e65af2ed3818215802de75034fe503b3d9445 100644
--- a/src/main/java/org/bukkit/entity/Wolf.java
+++ b/src/main/java/org/bukkit/entity/Wolf.java
@@ -94,6 +94,7 @@ public interface Wolf extends Tameable, Sittable, io.papermc.paper.entity.Collar
      */
     interface Variant extends Keyed {
 
+        // Paper start - Generated/WolfVariant
         Variant PALE = getVariant("pale");
         Variant SPOTTED = getVariant("spotted");
         Variant SNOWY = getVariant("snowy");
@@ -103,6 +104,7 @@ public interface Wolf extends Tameable, Sittable, io.papermc.paper.entity.Collar
         Variant WOODS = getVariant("woods");
         Variant CHESTNUT = getVariant("chestnut");
         Variant STRIPED = getVariant("striped");
+        // Paper end - Generated/WolfVariant
 
         @NotNull
         private static Variant getVariant(@NotNull String key) {
diff --git a/src/main/java/org/bukkit/entity/memory/MemoryKey.java b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
index d615c006c9153fb65024241604b744fbfc383efc..2c7a1222b75d7b65281207f1d4077d26a01cd4a8 100644
--- a/src/main/java/org/bukkit/entity/memory/MemoryKey.java
+++ b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
@@ -46,6 +46,7 @@ public final class MemoryKey<T> implements Keyed {
 
     private static final Map<NamespacedKey, MemoryKey> MEMORY_KEYS = new HashMap<>();
     //
+    // Paper start - Generated/MemoryKey
     public static final MemoryKey<Location> HOME = new MemoryKey<>(NamespacedKey.minecraft("home"), Location.class);
     public static final MemoryKey<Location> POTENTIAL_JOB_SITE = new MemoryKey<>(NamespacedKey.minecraft("potential_job_site"), Location.class);
     public static final MemoryKey<Location> JOB_SITE = new MemoryKey<>(NamespacedKey.minecraft("job_site"), Location.class);
@@ -69,6 +70,7 @@ public final class MemoryKey<T> implements Keyed {
     public static final MemoryKey<Location> LIKED_NOTEBLOCK_POSITION = new MemoryKey<>(NamespacedKey.minecraft("liked_noteblock"), Location.class);
     public static final MemoryKey<Integer> LIKED_NOTEBLOCK_COOLDOWN_TICKS = new MemoryKey<>(NamespacedKey.minecraft("liked_noteblock_cooldown_ticks"), Integer.class);
     public static final MemoryKey<Integer> ITEM_PICKUP_COOLDOWN_TICKS = new MemoryKey<>(NamespacedKey.minecraft("item_pickup_cooldown_ticks"), Integer.class);
+    // Paper end - Generated/MemoryKey
     /**
      * @deprecated this constant uses the wrong generic type, the sniffer now stores different positions
      * from possibly different worlds. Use the relevant methods in {@link org.bukkit.entity.Sniffer} directly
diff --git a/src/main/java/org/bukkit/generator/structure/Structure.java b/src/main/java/org/bukkit/generator/structure/Structure.java
index 46e510e67b156b469d1413e616a5ff6a6487fdbf..e2646c362a57ab0d01c034a2313ef4c5a567e08b 100644
--- a/src/main/java/org/bukkit/generator/structure/Structure.java
+++ b/src/main/java/org/bukkit/generator/structure/Structure.java
@@ -16,6 +16,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class Structure implements Keyed {
 
+    // Paper start - Generated/Structure
     public static final Structure PILLAGER_OUTPOST = getStructure("pillager_outpost");
     public static final Structure MINESHAFT = getStructure("mineshaft");
     public static final Structure MINESHAFT_MESA = getStructure("mineshaft_mesa");
@@ -52,6 +53,7 @@ public abstract class Structure implements Keyed {
     @MinecraftExperimental(Requires.UPDATE_1_21)
     @org.jetbrains.annotations.ApiStatus.Experimental // Paper - add missing annotation
     public static final Structure TRIAL_CHAMBERS = getStructure("trial_chambers");
+    // Paper end - Generated/Structure
 
     private static Structure getStructure(String name) {
         return Registry.STRUCTURE.get(NamespacedKey.minecraft(name));
diff --git a/src/main/java/org/bukkit/generator/structure/StructureType.java b/src/main/java/org/bukkit/generator/structure/StructureType.java
index 2f908d5545d76ea25e26f6a4be579460512b5faf..77a03c7c35da902a802a90a41d8583172a9ca992 100644
--- a/src/main/java/org/bukkit/generator/structure/StructureType.java
+++ b/src/main/java/org/bukkit/generator/structure/StructureType.java
@@ -14,6 +14,7 @@ import org.bukkit.Registry;
  */
 public abstract class StructureType implements Keyed {
 
+    // Paper start - Generated/StructureType
     public static final StructureType BURIED_TREASURE = getStructureType("buried_treasure");
     public static final StructureType DESERT_PYRAMID = getStructureType("desert_pyramid");
     public static final StructureType END_CITY = getStructureType("end_city");
@@ -30,6 +31,7 @@ public abstract class StructureType implements Keyed {
     public static final StructureType STRONGHOLD = getStructureType("stronghold");
     public static final StructureType SWAMP_HUT = getStructureType("swamp_hut");
     public static final StructureType WOODLAND_MANSION = getStructureType("woodland_mansion");
+    // Paper end - Generated/StructureType
 
     private static StructureType getStructureType(String name) {
         return Registry.STRUCTURE_TYPE.get(NamespacedKey.minecraft(name));
diff --git a/src/main/java/org/bukkit/inventory/ItemRarity.java b/src/main/java/org/bukkit/inventory/ItemRarity.java
index cbce835ed6d44e5b8c9aaae4e36a77f8e5bed45f..4bac8e092bc59405a9bba15e62b513cc643078c4 100644
--- a/src/main/java/org/bukkit/inventory/ItemRarity.java
+++ b/src/main/java/org/bukkit/inventory/ItemRarity.java
@@ -6,6 +6,7 @@ package org.bukkit.inventory;
  */
 public enum ItemRarity {
 
+    // Paper start - Generated/ItemRarity
     /**
      * White item name.
      */
@@ -22,6 +23,7 @@ public enum ItemRarity {
      * Light purple item name.
      */
     EPIC(net.kyori.adventure.text.format.NamedTextColor.LIGHT_PURPLE); // Paper
+    // Paper end - Generated/ItemRarity
     // Paper start - improve ItemRarity
     private final net.kyori.adventure.text.format.NamedTextColor color;
     ItemRarity(final net.kyori.adventure.text.format.NamedTextColor color) {
diff --git a/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java b/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java
index 74816d6da4d7c8d2fa8a7b93fdc4bf29c8d12803..cf879afd1cb77611f417d35e3bf7009d509ceaa4 100644
--- a/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java
+++ b/src/main/java/org/bukkit/inventory/meta/trim/TrimMaterial.java
@@ -11,6 +11,7 @@ import org.bukkit.Translatable;
  */
 public interface TrimMaterial extends Keyed, Translatable {
 
+    // Paper start - Generated/TrimMaterial
     /**
      * {@link Material#QUARTZ}.
      */
@@ -51,6 +52,7 @@ public interface TrimMaterial extends Keyed, Translatable {
      * {@link Material#AMETHYST_SHARD}.
      */
     public static final TrimMaterial AMETHYST = Registry.TRIM_MATERIAL.get(NamespacedKey.minecraft("amethyst"));
+    // Paper end - Generated/TrimMaterial
 
     // Paper start - adventure
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java b/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java
index 087e99ed281c0b282d91345067bfca80762faa0b..5d3c5d467c34c32dfc6addb7054887d48d08acd6 100644
--- a/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java
+++ b/src/main/java/org/bukkit/inventory/meta/trim/TrimPattern.java
@@ -11,6 +11,7 @@ import org.bukkit.Translatable;
  */
 public interface TrimPattern extends Keyed, Translatable {
 
+    // Paper start - Generated/TrimPattern
     /**
      * {@link Material#SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE}.
      */
@@ -83,6 +84,7 @@ public interface TrimPattern extends Keyed, Translatable {
      * {@link Material#BOLT_ARMOR_TRIM_SMITHING_TEMPLATE}.
      */
     public static final TrimPattern BOLT = Registry.TRIM_PATTERN.get(NamespacedKey.minecraft("bolt"));
+    // Paper end - Generated/TrimPattern
 
     // Paper start - adventure
     /**
diff --git a/src/main/java/org/bukkit/inventory/recipe/CookingBookCategory.java b/src/main/java/org/bukkit/inventory/recipe/CookingBookCategory.java
index 9990a7abf8f910ff5da45b6e5d94902e825e2096..54cd8b54e9516f6d900f9a550fc220063b494166 100644
--- a/src/main/java/org/bukkit/inventory/recipe/CookingBookCategory.java
+++ b/src/main/java/org/bukkit/inventory/recipe/CookingBookCategory.java
@@ -5,7 +5,9 @@ package org.bukkit.inventory.recipe;
  */
 public enum CookingBookCategory {
 
+    // Paper start - Generated/CookingBookCategory
     FOOD,
     BLOCKS,
     MISC;
+    // Paper end - Generated/CookingBookCategory
 }
diff --git a/src/main/java/org/bukkit/inventory/recipe/CraftingBookCategory.java b/src/main/java/org/bukkit/inventory/recipe/CraftingBookCategory.java
index 09a6a1b9b9ffb1e269bdaa1efc19cd8bedc2b499..3eecca87f204dcaebf580b7284859c4300057715 100644
--- a/src/main/java/org/bukkit/inventory/recipe/CraftingBookCategory.java
+++ b/src/main/java/org/bukkit/inventory/recipe/CraftingBookCategory.java
@@ -5,8 +5,10 @@ package org.bukkit.inventory.recipe;
  */
 public enum CraftingBookCategory {
 
+    // Paper start - Generated/CraftingBookCategory
     BUILDING,
     REDSTONE,
     EQUIPMENT,
     MISC;
+    // Paper end - Generated/CraftingBookCategory
 }
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
index 1afa33ca0d900d9301d52ace3ddb0bd50b5ce4e8..d6bde88cec67e63739d5eb9b8f43090eff416519 100644
--- a/src/main/java/org/bukkit/map/MapCursor.java
+++ b/src/main/java/org/bukkit/map/MapCursor.java
@@ -284,6 +284,7 @@ public final class MapCursor {
      * resource pack.
      */
     public enum Type implements Keyed {
+        // Paper start - Generated/MapCursorType
         PLAYER(0, "player"),
         FRAME(1, "frame"),
         RED_MARKER(2, "red_marker"),
@@ -320,6 +321,7 @@ public final class MapCursor {
         SWAMP_HUT(33, "swamp_hut"),
         TRIAL_CHAMBERS(34, "trial_chambers")
         ;
+        // Paper end - Generated/MapCursorType
 
         private byte value;
         private final NamespacedKey key;
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
index c80faa079eca1564847070f0338fc98024639829..825b6c7b4e6b24f8d49da7b44f37e8a5ddc2e2c1 100644
--- a/src/main/java/org/bukkit/map/MapPalette.java
+++ b/src/main/java/org/bukkit/map/MapPalette.java
@@ -41,6 +41,7 @@ public final class MapPalette {
 
     @NotNull
     static final Color[] colors = {
+        // Paper start - Generated/MapPalette#colors
         c(0, 0, 0, 0), c(0, 0, 0, 0), c(0, 0, 0, 0), c(0, 0, 0, 0),
         c(89, 125, 39), c(109, 153, 48), c(127, 178, 56), c(67, 94, 29),
         c(174, 164, 115), c(213, 201, 140), c(247, 233, 163), c(130, 123, 86),
@@ -103,6 +104,7 @@ public final class MapPalette {
         c(70, 70, 70), c(86, 86, 86), c(100, 100, 100), c(52, 52, 52),
         c(152, 123, 103), c(186, 150, 126), c(216, 175, 147), c(114, 92, 77),
         c(89, 117, 105), c(109, 144, 129), c(127, 167, 150), c(67, 88, 79)
+        // Paper end - Generated/MapPalette#colors
     };
 
     // Interface
diff --git a/src/main/java/org/bukkit/potion/PotionType.java b/src/main/java/org/bukkit/potion/PotionType.java
index 1fdd56450e8a0763833742c805847a723c43bf6c..eea6fc40ccc68d8f881ae6fbe72597bdb18b19b0 100644
--- a/src/main/java/org/bukkit/potion/PotionType.java
+++ b/src/main/java/org/bukkit/potion/PotionType.java
@@ -17,6 +17,7 @@ import org.jetbrains.annotations.Nullable;
  * the Creative mode inventory
  */
 public enum PotionType implements Keyed {
+    // Paper start - Generated/PotionType
     WATER("water"),
     MUNDANE("mundane"),
     THICK("thick"),
@@ -72,6 +73,7 @@ public enum PotionType implements Keyed {
     @org.jetbrains.annotations.ApiStatus.Experimental // Paper - add missing annotation
     INFESTED("infested"),
     ;
+    // Paper end - Generated/PotionType
 
     private final NamespacedKey key;
     private final Supplier<InternalPotionData> internalPotionDataSupplier;
diff --git a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
index 21cd2ba659504c3a1eb95226539a5701d0c324db..3f6044892ad17bb99786e0009c937d294e90aa09 100644
--- a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
+++ b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
@@ -6,6 +6,7 @@ import net.kyori.adventure.text.format.NamedTextColor; // Paper
  */
 public enum DisplaySlot {
     // Paper start
+    // Paper start - Generated/DisplaySlot
     BELOW_NAME("below_name"),
     PLAYER_LIST("list"),
     SIDEBAR("sidebar"),
@@ -25,6 +26,7 @@ public enum DisplaySlot {
     SIDEBAR_TEAM_LIGHT_PURPLE(NamedTextColor.LIGHT_PURPLE),
     SIDEBAR_TEAM_YELLOW(NamedTextColor.YELLOW),
     SIDEBAR_TEAM_WHITE(NamedTextColor.WHITE);
+    // Paper end - Generated/DisplaySlot
 
     public static final net.kyori.adventure.util.Index<String, DisplaySlot> NAMES = net.kyori.adventure.util.Index.create(DisplaySlot.class, DisplaySlot::getId);
 
